<?php
/**
 * ProductReferencesApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Aurigma\Storefront
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Storefront API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: storefront-v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aurigma\Storefront\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Aurigma\Storefront\ApiException;
use Aurigma\Storefront\Configuration;
use Aurigma\Storefront\HeaderSelector;
use Aurigma\Storefront\ObjectSerializer;

/**
 * ProductReferencesApi Class Doc Comment
 *
 * @category Class
 * @package  Aurigma\Storefront
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProductReferencesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation productReferencesCreate
     *
     * Creates a new storefront product reference.
     *
     * @param  int $storefront_id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  \Aurigma\Storefront\Model\CreateProductReferenceDto $create_product_reference_dto Create operation parameters. (optional)
     *
     * @throws \Aurigma\Storefront\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\Storefront\Model\ProductReferenceDto|\Aurigma\Storefront\Model\MicrosoftAspNetCoreMvcProblemDetails
     */
    public function productReferencesCreate($storefront_id, $tenant_id = null, $create_product_reference_dto = null)
    {
        list($response) = $this->productReferencesCreateWithHttpInfo($storefront_id, $tenant_id, $create_product_reference_dto);
        return $response;
    }

    /**
     * Operation productReferencesCreateWithHttpInfo
     *
     * Creates a new storefront product reference.
     *
     * @param  int $storefront_id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  \Aurigma\Storefront\Model\CreateProductReferenceDto $create_product_reference_dto Create operation parameters. (optional)
     *
     * @throws \Aurigma\Storefront\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\Storefront\Model\ProductReferenceDto|\Aurigma\Storefront\Model\MicrosoftAspNetCoreMvcProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function productReferencesCreateWithHttpInfo($storefront_id, $tenant_id = null, $create_product_reference_dto = null)
    {
        $request = $this->productReferencesCreateRequest($storefront_id, $tenant_id, $create_product_reference_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Aurigma\Storefront\Model\ProductReferenceDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\Storefront\Model\ProductReferenceDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\Storefront\Model\MicrosoftAspNetCoreMvcProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\Storefront\Model\MicrosoftAspNetCoreMvcProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\Storefront\Model\ProductReferenceDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\Storefront\Model\ProductReferenceDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\Storefront\Model\MicrosoftAspNetCoreMvcProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productReferencesCreateAsync
     *
     * Creates a new storefront product reference.
     *
     * @param  int $storefront_id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  \Aurigma\Storefront\Model\CreateProductReferenceDto $create_product_reference_dto Create operation parameters. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productReferencesCreateAsync($storefront_id, $tenant_id = null, $create_product_reference_dto = null)
    {
        return $this->productReferencesCreateAsyncWithHttpInfo($storefront_id, $tenant_id, $create_product_reference_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productReferencesCreateAsyncWithHttpInfo
     *
     * Creates a new storefront product reference.
     *
     * @param  int $storefront_id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  \Aurigma\Storefront\Model\CreateProductReferenceDto $create_product_reference_dto Create operation parameters. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productReferencesCreateAsyncWithHttpInfo($storefront_id, $tenant_id = null, $create_product_reference_dto = null)
    {
        $returnType = '\Aurigma\Storefront\Model\ProductReferenceDto';
        $request = $this->productReferencesCreateRequest($storefront_id, $tenant_id, $create_product_reference_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productReferencesCreate'
     *
     * @param  int $storefront_id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  \Aurigma\Storefront\Model\CreateProductReferenceDto $create_product_reference_dto Create operation parameters. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productReferencesCreateRequest($storefront_id, $tenant_id = null, $create_product_reference_dto = null)
    {
        // verify the required parameter 'storefront_id' is set
        if ($storefront_id === null || (is_array($storefront_id) && count($storefront_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_id when calling productReferencesCreate'
            );
        }

        $resourcePath = '/api/storefront/v1/product-references';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($storefront_id !== null) {
            if('form' === 'form' && is_array($storefront_id)) {
                foreach($storefront_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['storefrontId'] = $storefront_id;
            }
        }
        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($create_product_reference_dto)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_product_reference_dto));
            } else {
                $httpBody = $create_product_reference_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productReferencesDelete
     *
     * Deletes the storefront product reference.
     *
     * @param  string $reference Product reference - external reference to Customer&#39;s Canvas product specification, e.g online store product identifier. (required)
     * @param  int $storefront_id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\Storefront\Model\ProductReferenceDto|\Aurigma\Storefront\Model\MicrosoftAspNetCoreMvcProblemDetails
     */
    public function productReferencesDelete($reference, $storefront_id, $tenant_id = null)
    {
        list($response) = $this->productReferencesDeleteWithHttpInfo($reference, $storefront_id, $tenant_id);
        return $response;
    }

    /**
     * Operation productReferencesDeleteWithHttpInfo
     *
     * Deletes the storefront product reference.
     *
     * @param  string $reference Product reference - external reference to Customer&#39;s Canvas product specification, e.g online store product identifier. (required)
     * @param  int $storefront_id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\Storefront\Model\ProductReferenceDto|\Aurigma\Storefront\Model\MicrosoftAspNetCoreMvcProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function productReferencesDeleteWithHttpInfo($reference, $storefront_id, $tenant_id = null)
    {
        $request = $this->productReferencesDeleteRequest($reference, $storefront_id, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\Storefront\Model\ProductReferenceDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\Storefront\Model\ProductReferenceDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\Storefront\Model\MicrosoftAspNetCoreMvcProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\Storefront\Model\MicrosoftAspNetCoreMvcProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\Storefront\Model\ProductReferenceDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\Storefront\Model\ProductReferenceDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\Storefront\Model\MicrosoftAspNetCoreMvcProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productReferencesDeleteAsync
     *
     * Deletes the storefront product reference.
     *
     * @param  string $reference Product reference - external reference to Customer&#39;s Canvas product specification, e.g online store product identifier. (required)
     * @param  int $storefront_id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productReferencesDeleteAsync($reference, $storefront_id, $tenant_id = null)
    {
        return $this->productReferencesDeleteAsyncWithHttpInfo($reference, $storefront_id, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productReferencesDeleteAsyncWithHttpInfo
     *
     * Deletes the storefront product reference.
     *
     * @param  string $reference Product reference - external reference to Customer&#39;s Canvas product specification, e.g online store product identifier. (required)
     * @param  int $storefront_id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productReferencesDeleteAsyncWithHttpInfo($reference, $storefront_id, $tenant_id = null)
    {
        $returnType = '\Aurigma\Storefront\Model\ProductReferenceDto';
        $request = $this->productReferencesDeleteRequest($reference, $storefront_id, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productReferencesDelete'
     *
     * @param  string $reference Product reference - external reference to Customer&#39;s Canvas product specification, e.g online store product identifier. (required)
     * @param  int $storefront_id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productReferencesDeleteRequest($reference, $storefront_id, $tenant_id = null)
    {
        // verify the required parameter 'reference' is set
        if ($reference === null || (is_array($reference) && count($reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference when calling productReferencesDelete'
            );
        }
        // verify the required parameter 'storefront_id' is set
        if ($storefront_id === null || (is_array($storefront_id) && count($storefront_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_id when calling productReferencesDelete'
            );
        }

        $resourcePath = '/api/storefront/v1/product-references/{reference}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($storefront_id !== null) {
            if('form' === 'form' && is_array($storefront_id)) {
                foreach($storefront_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['storefrontId'] = $storefront_id;
            }
        }
        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($reference !== null) {
            $resourcePath = str_replace(
                '{' . 'reference' . '}',
                ObjectSerializer::toPathValue($reference),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productReferencesGet
     *
     * Returns a storefront product reference.
     *
     * @param  string $reference Product reference - external reference to Customer&#39;s Canvas product specification, e.g online store product identifier. (required)
     * @param  int $storefront_id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\Storefront\Model\ProductReferenceDto|\Aurigma\Storefront\Model\MicrosoftAspNetCoreMvcProblemDetails
     */
    public function productReferencesGet($reference, $storefront_id, $tenant_id = null)
    {
        list($response) = $this->productReferencesGetWithHttpInfo($reference, $storefront_id, $tenant_id);
        return $response;
    }

    /**
     * Operation productReferencesGetWithHttpInfo
     *
     * Returns a storefront product reference.
     *
     * @param  string $reference Product reference - external reference to Customer&#39;s Canvas product specification, e.g online store product identifier. (required)
     * @param  int $storefront_id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\Storefront\Model\ProductReferenceDto|\Aurigma\Storefront\Model\MicrosoftAspNetCoreMvcProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function productReferencesGetWithHttpInfo($reference, $storefront_id, $tenant_id = null)
    {
        $request = $this->productReferencesGetRequest($reference, $storefront_id, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\Storefront\Model\ProductReferenceDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\Storefront\Model\ProductReferenceDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\Storefront\Model\MicrosoftAspNetCoreMvcProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\Storefront\Model\MicrosoftAspNetCoreMvcProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\Storefront\Model\ProductReferenceDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\Storefront\Model\ProductReferenceDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\Storefront\Model\MicrosoftAspNetCoreMvcProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productReferencesGetAsync
     *
     * Returns a storefront product reference.
     *
     * @param  string $reference Product reference - external reference to Customer&#39;s Canvas product specification, e.g online store product identifier. (required)
     * @param  int $storefront_id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productReferencesGetAsync($reference, $storefront_id, $tenant_id = null)
    {
        return $this->productReferencesGetAsyncWithHttpInfo($reference, $storefront_id, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productReferencesGetAsyncWithHttpInfo
     *
     * Returns a storefront product reference.
     *
     * @param  string $reference Product reference - external reference to Customer&#39;s Canvas product specification, e.g online store product identifier. (required)
     * @param  int $storefront_id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productReferencesGetAsyncWithHttpInfo($reference, $storefront_id, $tenant_id = null)
    {
        $returnType = '\Aurigma\Storefront\Model\ProductReferenceDto';
        $request = $this->productReferencesGetRequest($reference, $storefront_id, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productReferencesGet'
     *
     * @param  string $reference Product reference - external reference to Customer&#39;s Canvas product specification, e.g online store product identifier. (required)
     * @param  int $storefront_id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productReferencesGetRequest($reference, $storefront_id, $tenant_id = null)
    {
        // verify the required parameter 'reference' is set
        if ($reference === null || (is_array($reference) && count($reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference when calling productReferencesGet'
            );
        }
        // verify the required parameter 'storefront_id' is set
        if ($storefront_id === null || (is_array($storefront_id) && count($storefront_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_id when calling productReferencesGet'
            );
        }

        $resourcePath = '/api/storefront/v1/product-references/{reference}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($storefront_id !== null) {
            if('form' === 'form' && is_array($storefront_id)) {
                foreach($storefront_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['storefrontId'] = $storefront_id;
            }
        }
        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($reference !== null) {
            $resourcePath = str_replace(
                '{' . 'reference' . '}',
                ObjectSerializer::toPathValue($reference),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productReferencesGetAll
     *
     * Returns all storefront product references relevant to the specified query parameters.
     *
     * @param  int $storefront_id Storefront identifier. (required)
     * @param  string $product_reference Product reference filter. Product reference is an external reference to Customer&#39;s Canvas product specification, e.g online store product identifier. (optional)
     * @param  int $product_specification_id Cusomer&#39;s Canvas product specification filter. (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $sorting Defines sorting order of result list e.g.: \&quot;Title ASC, LastModified DESC\&quot;. (optional)
     * @param  string $search Search string for partial match. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\Storefront\Model\PagedOfProductReferenceDto
     */
    public function productReferencesGetAll($storefront_id, $product_reference = null, $product_specification_id = null, $skip = null, $take = null, $sorting = null, $search = null, $tenant_id = null)
    {
        list($response) = $this->productReferencesGetAllWithHttpInfo($storefront_id, $product_reference, $product_specification_id, $skip, $take, $sorting, $search, $tenant_id);
        return $response;
    }

    /**
     * Operation productReferencesGetAllWithHttpInfo
     *
     * Returns all storefront product references relevant to the specified query parameters.
     *
     * @param  int $storefront_id Storefront identifier. (required)
     * @param  string $product_reference Product reference filter. Product reference is an external reference to Customer&#39;s Canvas product specification, e.g online store product identifier. (optional)
     * @param  int $product_specification_id Cusomer&#39;s Canvas product specification filter. (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $sorting Defines sorting order of result list e.g.: \&quot;Title ASC, LastModified DESC\&quot;. (optional)
     * @param  string $search Search string for partial match. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\Storefront\Model\PagedOfProductReferenceDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function productReferencesGetAllWithHttpInfo($storefront_id, $product_reference = null, $product_specification_id = null, $skip = null, $take = null, $sorting = null, $search = null, $tenant_id = null)
    {
        $request = $this->productReferencesGetAllRequest($storefront_id, $product_reference, $product_specification_id, $skip, $take, $sorting, $search, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\Storefront\Model\PagedOfProductReferenceDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\Storefront\Model\PagedOfProductReferenceDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\Storefront\Model\PagedOfProductReferenceDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\Storefront\Model\PagedOfProductReferenceDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productReferencesGetAllAsync
     *
     * Returns all storefront product references relevant to the specified query parameters.
     *
     * @param  int $storefront_id Storefront identifier. (required)
     * @param  string $product_reference Product reference filter. Product reference is an external reference to Customer&#39;s Canvas product specification, e.g online store product identifier. (optional)
     * @param  int $product_specification_id Cusomer&#39;s Canvas product specification filter. (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $sorting Defines sorting order of result list e.g.: \&quot;Title ASC, LastModified DESC\&quot;. (optional)
     * @param  string $search Search string for partial match. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productReferencesGetAllAsync($storefront_id, $product_reference = null, $product_specification_id = null, $skip = null, $take = null, $sorting = null, $search = null, $tenant_id = null)
    {
        return $this->productReferencesGetAllAsyncWithHttpInfo($storefront_id, $product_reference, $product_specification_id, $skip, $take, $sorting, $search, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productReferencesGetAllAsyncWithHttpInfo
     *
     * Returns all storefront product references relevant to the specified query parameters.
     *
     * @param  int $storefront_id Storefront identifier. (required)
     * @param  string $product_reference Product reference filter. Product reference is an external reference to Customer&#39;s Canvas product specification, e.g online store product identifier. (optional)
     * @param  int $product_specification_id Cusomer&#39;s Canvas product specification filter. (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $sorting Defines sorting order of result list e.g.: \&quot;Title ASC, LastModified DESC\&quot;. (optional)
     * @param  string $search Search string for partial match. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productReferencesGetAllAsyncWithHttpInfo($storefront_id, $product_reference = null, $product_specification_id = null, $skip = null, $take = null, $sorting = null, $search = null, $tenant_id = null)
    {
        $returnType = '\Aurigma\Storefront\Model\PagedOfProductReferenceDto';
        $request = $this->productReferencesGetAllRequest($storefront_id, $product_reference, $product_specification_id, $skip, $take, $sorting, $search, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productReferencesGetAll'
     *
     * @param  int $storefront_id Storefront identifier. (required)
     * @param  string $product_reference Product reference filter. Product reference is an external reference to Customer&#39;s Canvas product specification, e.g online store product identifier. (optional)
     * @param  int $product_specification_id Cusomer&#39;s Canvas product specification filter. (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $sorting Defines sorting order of result list e.g.: \&quot;Title ASC, LastModified DESC\&quot;. (optional)
     * @param  string $search Search string for partial match. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productReferencesGetAllRequest($storefront_id, $product_reference = null, $product_specification_id = null, $skip = null, $take = null, $sorting = null, $search = null, $tenant_id = null)
    {
        // verify the required parameter 'storefront_id' is set
        if ($storefront_id === null || (is_array($storefront_id) && count($storefront_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_id when calling productReferencesGetAll'
            );
        }

        $resourcePath = '/api/storefront/v1/product-references';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($product_reference !== null) {
            if('form' === 'form' && is_array($product_reference)) {
                foreach($product_reference as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['productReference'] = $product_reference;
            }
        }
        // query params
        if ($product_specification_id !== null) {
            if('form' === 'form' && is_array($product_specification_id)) {
                foreach($product_specification_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['productSpecificationId'] = $product_specification_id;
            }
        }
        // query params
        if ($skip !== null) {
            if('form' === 'form' && is_array($skip)) {
                foreach($skip as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['skip'] = $skip;
            }
        }
        // query params
        if ($take !== null) {
            if('form' === 'form' && is_array($take)) {
                foreach($take as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['take'] = $take;
            }
        }
        // query params
        if ($sorting !== null) {
            if('form' === 'form' && is_array($sorting)) {
                foreach($sorting as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sorting'] = $sorting;
            }
        }
        // query params
        if ($search !== null) {
            if('form' === 'form' && is_array($search)) {
                foreach($search as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['search'] = $search;
            }
        }
        // query params
        if ($storefront_id !== null) {
            if('form' === 'form' && is_array($storefront_id)) {
                foreach($storefront_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['storefrontId'] = $storefront_id;
            }
        }
        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productReferencesGetProductConfig
     *
     * Returns a product personalization workflow configuration by storefront product reference.
     *
     * @param  string $reference Product reference - external reference to Customer&#39;s Canvas product specification, e.g online store product identifier. (required)
     * @param  int $storefront_id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string|\Aurigma\Storefront\Model\MicrosoftAspNetCoreMvcProblemDetails
     */
    public function productReferencesGetProductConfig($reference, $storefront_id, $tenant_id = null)
    {
        list($response) = $this->productReferencesGetProductConfigWithHttpInfo($reference, $storefront_id, $tenant_id);
        return $response;
    }

    /**
     * Operation productReferencesGetProductConfigWithHttpInfo
     *
     * Returns a product personalization workflow configuration by storefront product reference.
     *
     * @param  string $reference Product reference - external reference to Customer&#39;s Canvas product specification, e.g online store product identifier. (required)
     * @param  int $storefront_id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string|\Aurigma\Storefront\Model\MicrosoftAspNetCoreMvcProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function productReferencesGetProductConfigWithHttpInfo($reference, $storefront_id, $tenant_id = null)
    {
        $request = $this->productReferencesGetProductConfigRequest($reference, $storefront_id, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\Storefront\Model\MicrosoftAspNetCoreMvcProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\Storefront\Model\MicrosoftAspNetCoreMvcProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\Storefront\Model\MicrosoftAspNetCoreMvcProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productReferencesGetProductConfigAsync
     *
     * Returns a product personalization workflow configuration by storefront product reference.
     *
     * @param  string $reference Product reference - external reference to Customer&#39;s Canvas product specification, e.g online store product identifier. (required)
     * @param  int $storefront_id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productReferencesGetProductConfigAsync($reference, $storefront_id, $tenant_id = null)
    {
        return $this->productReferencesGetProductConfigAsyncWithHttpInfo($reference, $storefront_id, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productReferencesGetProductConfigAsyncWithHttpInfo
     *
     * Returns a product personalization workflow configuration by storefront product reference.
     *
     * @param  string $reference Product reference - external reference to Customer&#39;s Canvas product specification, e.g online store product identifier. (required)
     * @param  int $storefront_id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productReferencesGetProductConfigAsyncWithHttpInfo($reference, $storefront_id, $tenant_id = null)
    {
        $returnType = 'string';
        $request = $this->productReferencesGetProductConfigRequest($reference, $storefront_id, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productReferencesGetProductConfig'
     *
     * @param  string $reference Product reference - external reference to Customer&#39;s Canvas product specification, e.g online store product identifier. (required)
     * @param  int $storefront_id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productReferencesGetProductConfigRequest($reference, $storefront_id, $tenant_id = null)
    {
        // verify the required parameter 'reference' is set
        if ($reference === null || (is_array($reference) && count($reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference when calling productReferencesGetProductConfig'
            );
        }
        // verify the required parameter 'storefront_id' is set
        if ($storefront_id === null || (is_array($storefront_id) && count($storefront_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_id when calling productReferencesGetProductConfig'
            );
        }

        $resourcePath = '/api/storefront/v1/product-references/{reference}/product-config';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($storefront_id !== null) {
            if('form' === 'form' && is_array($storefront_id)) {
                foreach($storefront_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['storefrontId'] = $storefront_id;
            }
        }
        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($reference !== null) {
            $resourcePath = str_replace(
                '{' . 'reference' . '}',
                ObjectSerializer::toPathValue($reference),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productReferencesGetProductCostDetails
     *
     * Returns a product cost details from ecommerce system.
     *
     * @param  string $reference Product reference - external reference to Customer&#39;s Canvas product product specification, e.g online store product identifier. (required)
     * @param  string $sku Product SKU. (required)
     * @param  int $storefront_id Storefront identifier. (required)
     * @param  string $storefront_user_id Storefront user identifier. (optional)
     * @param  string $currency_code Product cost currency code. (optional)
     * @param  int $quantity Product quantity. (optional, default to 1)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\Storefront\Model\ProductCostDetailsDto|\Aurigma\Storefront\Model\MicrosoftAspNetCoreMvcProblemDetails
     */
    public function productReferencesGetProductCostDetails($reference, $sku, $storefront_id, $storefront_user_id = null, $currency_code = null, $quantity = 1, $tenant_id = null)
    {
        list($response) = $this->productReferencesGetProductCostDetailsWithHttpInfo($reference, $sku, $storefront_id, $storefront_user_id, $currency_code, $quantity, $tenant_id);
        return $response;
    }

    /**
     * Operation productReferencesGetProductCostDetailsWithHttpInfo
     *
     * Returns a product cost details from ecommerce system.
     *
     * @param  string $reference Product reference - external reference to Customer&#39;s Canvas product product specification, e.g online store product identifier. (required)
     * @param  string $sku Product SKU. (required)
     * @param  int $storefront_id Storefront identifier. (required)
     * @param  string $storefront_user_id Storefront user identifier. (optional)
     * @param  string $currency_code Product cost currency code. (optional)
     * @param  int $quantity Product quantity. (optional, default to 1)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\Storefront\Model\ProductCostDetailsDto|\Aurigma\Storefront\Model\MicrosoftAspNetCoreMvcProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function productReferencesGetProductCostDetailsWithHttpInfo($reference, $sku, $storefront_id, $storefront_user_id = null, $currency_code = null, $quantity = 1, $tenant_id = null)
    {
        $request = $this->productReferencesGetProductCostDetailsRequest($reference, $sku, $storefront_id, $storefront_user_id, $currency_code, $quantity, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\Storefront\Model\ProductCostDetailsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\Storefront\Model\ProductCostDetailsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\Storefront\Model\MicrosoftAspNetCoreMvcProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\Storefront\Model\MicrosoftAspNetCoreMvcProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\Storefront\Model\ProductCostDetailsDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\Storefront\Model\ProductCostDetailsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\Storefront\Model\MicrosoftAspNetCoreMvcProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productReferencesGetProductCostDetailsAsync
     *
     * Returns a product cost details from ecommerce system.
     *
     * @param  string $reference Product reference - external reference to Customer&#39;s Canvas product product specification, e.g online store product identifier. (required)
     * @param  string $sku Product SKU. (required)
     * @param  int $storefront_id Storefront identifier. (required)
     * @param  string $storefront_user_id Storefront user identifier. (optional)
     * @param  string $currency_code Product cost currency code. (optional)
     * @param  int $quantity Product quantity. (optional, default to 1)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productReferencesGetProductCostDetailsAsync($reference, $sku, $storefront_id, $storefront_user_id = null, $currency_code = null, $quantity = 1, $tenant_id = null)
    {
        return $this->productReferencesGetProductCostDetailsAsyncWithHttpInfo($reference, $sku, $storefront_id, $storefront_user_id, $currency_code, $quantity, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productReferencesGetProductCostDetailsAsyncWithHttpInfo
     *
     * Returns a product cost details from ecommerce system.
     *
     * @param  string $reference Product reference - external reference to Customer&#39;s Canvas product product specification, e.g online store product identifier. (required)
     * @param  string $sku Product SKU. (required)
     * @param  int $storefront_id Storefront identifier. (required)
     * @param  string $storefront_user_id Storefront user identifier. (optional)
     * @param  string $currency_code Product cost currency code. (optional)
     * @param  int $quantity Product quantity. (optional, default to 1)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productReferencesGetProductCostDetailsAsyncWithHttpInfo($reference, $sku, $storefront_id, $storefront_user_id = null, $currency_code = null, $quantity = 1, $tenant_id = null)
    {
        $returnType = '\Aurigma\Storefront\Model\ProductCostDetailsDto';
        $request = $this->productReferencesGetProductCostDetailsRequest($reference, $sku, $storefront_id, $storefront_user_id, $currency_code, $quantity, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productReferencesGetProductCostDetails'
     *
     * @param  string $reference Product reference - external reference to Customer&#39;s Canvas product product specification, e.g online store product identifier. (required)
     * @param  string $sku Product SKU. (required)
     * @param  int $storefront_id Storefront identifier. (required)
     * @param  string $storefront_user_id Storefront user identifier. (optional)
     * @param  string $currency_code Product cost currency code. (optional)
     * @param  int $quantity Product quantity. (optional, default to 1)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productReferencesGetProductCostDetailsRequest($reference, $sku, $storefront_id, $storefront_user_id = null, $currency_code = null, $quantity = 1, $tenant_id = null)
    {
        // verify the required parameter 'reference' is set
        if ($reference === null || (is_array($reference) && count($reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference when calling productReferencesGetProductCostDetails'
            );
        }
        // verify the required parameter 'sku' is set
        if ($sku === null || (is_array($sku) && count($sku) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sku when calling productReferencesGetProductCostDetails'
            );
        }
        // verify the required parameter 'storefront_id' is set
        if ($storefront_id === null || (is_array($storefront_id) && count($storefront_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_id when calling productReferencesGetProductCostDetails'
            );
        }

        $resourcePath = '/api/storefront/v1/product-references/{reference}/product-cost-details';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sku !== null) {
            if('form' === 'form' && is_array($sku)) {
                foreach($sku as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sku'] = $sku;
            }
        }
        // query params
        if ($storefront_id !== null) {
            if('form' === 'form' && is_array($storefront_id)) {
                foreach($storefront_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['storefrontId'] = $storefront_id;
            }
        }
        // query params
        if ($storefront_user_id !== null) {
            if('form' === 'form' && is_array($storefront_user_id)) {
                foreach($storefront_user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['storefrontUserId'] = $storefront_user_id;
            }
        }
        // query params
        if ($currency_code !== null) {
            if('form' === 'form' && is_array($currency_code)) {
                foreach($currency_code as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['currencyCode'] = $currency_code;
            }
        }
        // query params
        if ($quantity !== null) {
            if('form' === 'form' && is_array($quantity)) {
                foreach($quantity as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['quantity'] = $quantity;
            }
        }
        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($reference !== null) {
            $resourcePath = str_replace(
                '{' . 'reference' . '}',
                ObjectSerializer::toPathValue($reference),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productReferencesGetProductSpecification
     *
     * Returns a product specification by the storefront product reference.
     *
     * @param  string $reference Product reference - external reference to Customer&#39;s Canvas product specification, e.g online store product identifier. (required)
     * @param  int $storefront_id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\Storefront\Model\ProductSpecificationDto|\Aurigma\Storefront\Model\MicrosoftAspNetCoreMvcProblemDetails
     */
    public function productReferencesGetProductSpecification($reference, $storefront_id, $tenant_id = null)
    {
        list($response) = $this->productReferencesGetProductSpecificationWithHttpInfo($reference, $storefront_id, $tenant_id);
        return $response;
    }

    /**
     * Operation productReferencesGetProductSpecificationWithHttpInfo
     *
     * Returns a product specification by the storefront product reference.
     *
     * @param  string $reference Product reference - external reference to Customer&#39;s Canvas product specification, e.g online store product identifier. (required)
     * @param  int $storefront_id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\Storefront\Model\ProductSpecificationDto|\Aurigma\Storefront\Model\MicrosoftAspNetCoreMvcProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function productReferencesGetProductSpecificationWithHttpInfo($reference, $storefront_id, $tenant_id = null)
    {
        $request = $this->productReferencesGetProductSpecificationRequest($reference, $storefront_id, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\Storefront\Model\ProductSpecificationDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\Storefront\Model\ProductSpecificationDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\Storefront\Model\MicrosoftAspNetCoreMvcProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\Storefront\Model\MicrosoftAspNetCoreMvcProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\Storefront\Model\ProductSpecificationDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\Storefront\Model\ProductSpecificationDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\Storefront\Model\MicrosoftAspNetCoreMvcProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productReferencesGetProductSpecificationAsync
     *
     * Returns a product specification by the storefront product reference.
     *
     * @param  string $reference Product reference - external reference to Customer&#39;s Canvas product specification, e.g online store product identifier. (required)
     * @param  int $storefront_id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productReferencesGetProductSpecificationAsync($reference, $storefront_id, $tenant_id = null)
    {
        return $this->productReferencesGetProductSpecificationAsyncWithHttpInfo($reference, $storefront_id, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productReferencesGetProductSpecificationAsyncWithHttpInfo
     *
     * Returns a product specification by the storefront product reference.
     *
     * @param  string $reference Product reference - external reference to Customer&#39;s Canvas product specification, e.g online store product identifier. (required)
     * @param  int $storefront_id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productReferencesGetProductSpecificationAsyncWithHttpInfo($reference, $storefront_id, $tenant_id = null)
    {
        $returnType = '\Aurigma\Storefront\Model\ProductSpecificationDto';
        $request = $this->productReferencesGetProductSpecificationRequest($reference, $storefront_id, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productReferencesGetProductSpecification'
     *
     * @param  string $reference Product reference - external reference to Customer&#39;s Canvas product specification, e.g online store product identifier. (required)
     * @param  int $storefront_id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productReferencesGetProductSpecificationRequest($reference, $storefront_id, $tenant_id = null)
    {
        // verify the required parameter 'reference' is set
        if ($reference === null || (is_array($reference) && count($reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference when calling productReferencesGetProductSpecification'
            );
        }
        // verify the required parameter 'storefront_id' is set
        if ($storefront_id === null || (is_array($storefront_id) && count($storefront_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_id when calling productReferencesGetProductSpecification'
            );
        }

        $resourcePath = '/api/storefront/v1/product-references/{reference}/product-specification';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($storefront_id !== null) {
            if('form' === 'form' && is_array($storefront_id)) {
                foreach($storefront_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['storefrontId'] = $storefront_id;
            }
        }
        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($reference !== null) {
            $resourcePath = str_replace(
                '{' . 'reference' . '}',
                ObjectSerializer::toPathValue($reference),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
