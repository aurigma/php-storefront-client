<?php
/**
 * RenderHiResScenarioDto
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Aurigma\Storefront
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Storefront API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: storefront-v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aurigma\Storefront\Model;

use \ArrayAccess;
use \Aurigma\Storefront\ObjectSerializer;

/**
 * RenderHiResScenarioDto Class Doc Comment
 *
 * @category Class
 * @description Dto class, containing &#39;RenderHiRes&#39; scenario paramters.
 * @package  Aurigma\Storefront
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class RenderHiResScenarioDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RenderHiResScenarioDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'design_id' => 'string',
        'name' => 'string',
        'dpi' => 'int',
        'format' => '\Aurigma\Storefront\Model\RenderHiResScenarioOutputFormat',
        'color_space' => '\Aurigma\Storefront\Model\RenderHiResScenarioOutputColorSpace',
        'flip_mode' => '\Aurigma\Storefront\Model\RenderHiResScenarioOutputFlipMode',
        'anonymous_access' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'design_id' => null,
        'name' => null,
        'dpi' => 'int32',
        'format' => null,
        'color_space' => null,
        'flip_mode' => null,
        'anonymous_access' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'design_id' => 'designId',
        'name' => 'name',
        'dpi' => 'dpi',
        'format' => 'format',
        'color_space' => 'colorSpace',
        'flip_mode' => 'flipMode',
        'anonymous_access' => 'anonymousAccess'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'design_id' => 'setDesignId',
        'name' => 'setName',
        'dpi' => 'setDpi',
        'format' => 'setFormat',
        'color_space' => 'setColorSpace',
        'flip_mode' => 'setFlipMode',
        'anonymous_access' => 'setAnonymousAccess'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'design_id' => 'getDesignId',
        'name' => 'getName',
        'dpi' => 'getDpi',
        'format' => 'getFormat',
        'color_space' => 'getColorSpace',
        'flip_mode' => 'getFlipMode',
        'anonymous_access' => 'getAnonymousAccess'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['design_id'] = $data['design_id'] ?? null;
        $this->container['name'] = $data['name'] ?? 'result';
        $this->container['dpi'] = $data['dpi'] ?? 300;
        $this->container['format'] = $data['format'] ?? null;
        $this->container['color_space'] = $data['color_space'] ?? null;
        $this->container['flip_mode'] = $data['flip_mode'] ?? null;
        $this->container['anonymous_access'] = $data['anonymous_access'] ?? false;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['design_id'] === null) {
            $invalidProperties[] = "'design_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets design_id
     *
     * @return string
     */
    public function getDesignId()
    {
        return $this->container['design_id'];
    }

    /**
     * Sets design_id
     *
     * @param string $design_id Private design identifier.
     *
     * @return self
     */
    public function setDesignId($design_id)
    {
        $this->container['design_id'] = $design_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Output file name (without extension).
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets dpi
     *
     * @return int|null
     */
    public function getDpi()
    {
        return $this->container['dpi'];
    }

    /**
     * Sets dpi
     *
     * @param int|null $dpi Output file DPI.
     *
     * @return self
     */
    public function setDpi($dpi)
    {
        $this->container['dpi'] = $dpi;

        return $this;
    }

    /**
     * Gets format
     *
     * @return \Aurigma\Storefront\Model\RenderHiResScenarioOutputFormat|null
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param \Aurigma\Storefront\Model\RenderHiResScenarioOutputFormat|null $format format
     *
     * @return self
     */
    public function setFormat($format)
    {
        $this->container['format'] = $format;

        return $this;
    }

    /**
     * Gets color_space
     *
     * @return \Aurigma\Storefront\Model\RenderHiResScenarioOutputColorSpace|null
     */
    public function getColorSpace()
    {
        return $this->container['color_space'];
    }

    /**
     * Sets color_space
     *
     * @param \Aurigma\Storefront\Model\RenderHiResScenarioOutputColorSpace|null $color_space color_space
     *
     * @return self
     */
    public function setColorSpace($color_space)
    {
        $this->container['color_space'] = $color_space;

        return $this;
    }

    /**
     * Gets flip_mode
     *
     * @return \Aurigma\Storefront\Model\RenderHiResScenarioOutputFlipMode|null
     */
    public function getFlipMode()
    {
        return $this->container['flip_mode'];
    }

    /**
     * Sets flip_mode
     *
     * @param \Aurigma\Storefront\Model\RenderHiResScenarioOutputFlipMode|null $flip_mode flip_mode
     *
     * @return self
     */
    public function setFlipMode($flip_mode)
    {
        $this->container['flip_mode'] = $flip_mode;

        return $this;
    }

    /**
     * Gets anonymous_access
     *
     * @return bool|null
     */
    public function getAnonymousAccess()
    {
        return $this->container['anonymous_access'];
    }

    /**
     * Sets anonymous_access
     *
     * @param bool|null $anonymous_access Output file access mode.
     *
     * @return self
     */
    public function setAnonymousAccess($anonymous_access)
    {
        $this->container['anonymous_access'] = $anonymous_access;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


